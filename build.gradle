import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import org.gradle.internal.os.OperatingSystem;

plugins {
    id 'org.beryx.runtime' version '1.12.7'
}

version = '1.0.0'
def os = OperatingSystem.current()

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-configuration2:2.7'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'com.formdev:flatlaf:2.0.2'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
}

application {
    mainClass = 'com.github.uguisu32j.hitakieditor.HitakiEditor'
    applicationDefaultJvmArgs = ['-Dapple.laf.useScreenMenuBar=true', '-Djava.net.useSystemProxies=true']
}

jar {
    archiveBaseName = 'hitakieditor'
    manifest.attributes 'Main-Class': application.mainClass
}

runtime.jpackage {
    imageOptions = ['--vendor', 'Uguisu32J', '--copyright', 'Copyright (c) 2021 Uguisu32J']
    installerOptions = ['--vendor', 'Uguisu32J', '--copyright', 'Copyright (c) 2021 Uguisu32J']
    if (os.windows) {
        imageOptions += ['--icon', 'icons/icon.ico']
        installerOptions += ['--win-dir-chooser', '--win-menu', '--win-per-user-install']
        installerType = 'exe'
    } else if (os.macOsX) {
        imageOptions += ['--icon', 'icons/icon.icns']
        skipInstaller = true
    } else if (os.linux) {
        imageOptions += ['--icon', 'icons/icon.png']
    }
}

tasks.jpackage.doLast {
    if (os.windows) {
        Files.move(Path.of("${buildDir}/jpackage/HitakiEditor-${version}.exe"), Path.of(
                "${buildDir}/jpackage/HitakiEditorSetup-${version}.exe"), StandardCopyOption.REPLACE_EXISTING);
    }
}

task jpackageZip(group: 'build', type: Zip, dependsOn: jpackage) {
    destinationDirectory = file('build/jpackage')
    if (os.windows) {
        from 'build/jpackage/HitakiEditor'
        into 'HitakiEditor'
        archiveClassifier = 'Windows'
    } else if (os.macOsX) {
        from 'build/jpackage/HitakiEditor.app'
        into 'HitakiEditor.app'
        archiveClassifier = 'macOS'
    }
}

task jpackageTar(group: 'build', type: Tar, dependsOn: jpackage) {
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
    destinationDirectory = file('build/jpackage')
    if (os.linux)  {
        from 'build/jpackage/HitakiEditor'
        into 'HitakiEditor'
        archiveClassifier = 'Linux'
    }
}

task jpackageArchive(group: 'build', dependsOn: [jpackageZip, jpackageTar])
